name: Deploy to GitHub Pages

on:
  push:
    branches: [main, master]
    paths:
      - '*.Rmd'
      - 'functions.R'
      - 'data/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup R environment
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.0'
          use-public-rspm: true

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libxml2-dev libssl-dev
          install.packages(c("rmarkdown", "knitr", "dplyr", "tidyr", "ggplot2", "readr", "data.table", "Matrix", "remotes"))
          remotes::install_github("IvanWilli/DemoKin")
        shell: Rscript {0}

      - name: Create output directory
        run: mkdir -p _site

      - name: Render R Markdown files
        run: |
          # Get all Rmd files
          files <- list.files(pattern = "\\.Rmd$", full.names = TRUE)
          
          # Render each file
          for (file in files) {
            message("Rendering: ", file)
            tryCatch({
              rmarkdown::render(file, output_dir = "_site")
            }, error = function(e) {
              message("Error rendering ", file, ": ", e$message)
              # Continue with other files but log errors
            })
          }
          
          # Copy support files
          if (file.exists("functions.R")) {
            file.copy("functions.R", "_site/functions.R")
          }
          
          # Copy data directory if it exists
          if (dir.exists("data")) {
            dir.create("_site/data", recursive = TRUE, showWarnings = FALSE)
            data_files <- list.files("data", full.names = TRUE, recursive = TRUE)
            for (file in data_files) {
              dest <- file.path("_site", file)
              dir.create(dirname(dest), recursive = TRUE, showWarnings = FALSE)
              file.copy(file, dest)
            }
          }
        shell: Rscript {0}

      - name: Create index page
        run: |
          cat << EOF > _site/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>DemoKin Tutorials</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 1000px;
                margin: 0 auto;
                padding: 20px;
              }
              h1 {
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
                margin-bottom: 30px;
              }
              .tutorial-list {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 20px;
              }
              .tutorial-card {
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 15px;
                transition: transform 0.2s, box-shadow 0.2s;
              }
              .tutorial-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
              }
              .tutorial-title {
                margin-top: 0;
                margin-bottom: 10px;
                font-size: 1.2em;
              }
              .tutorial-link {
                color: #0366d6;
                text-decoration: none;
              }
              .tutorial-link:hover {
                text-decoration: underline;
              }
            </style>
          </head>
          <body>
            <h1>DemoKin Tutorials</h1>
            <div class="tutorial-list">
          EOF
          
          # Add a card for each HTML file
          for file in _site/*.html; do
            if [ "$(basename "$file")" != "index.html" ]; then
              filename=$(basename "$file")
              title=$(grep -m 1 "<title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' || echo "${filename%.*}")
              
              cat << EOF >> _site/index.html
              <div class="tutorial-card">
                <h2 class="tutorial-title">
                  <a class="tutorial-link" href="$filename">$title</a>
                </h2>
              </div>
          EOF
            fi
          done
          
          # Close the HTML file
          cat << EOF >> _site/index.html
            </div>
          </body>
          </html>
          EOF
          
          # Create a .nojekyll file to prevent GitHub Pages from using Jekyll
          touch _site/.nojekyll

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: _site
          clean: true  # Clean old files
